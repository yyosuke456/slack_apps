/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package slack.socket.app;

import com.slack.api.bolt.App;
import com.slack.api.bolt.socket_mode.SocketModeApp;
import com.slack.api.model.event.MessageEvent;
import com.slack.api.model.view.View;

import static com.slack.api.model.block.Blocks.asBlocks;
import static com.slack.api.model.block.Blocks.input;
import static com.slack.api.model.block.composition.BlockCompositions.plainText;
import static com.slack.api.model.block.element.BlockElements.plainTextInput;
import static com.slack.api.model.view.Views.*;

public class MyApp {
  public static void main(String[] args) throws Exception {
    System.setProperty("org.slf4j.simpleLogger.log.com.slack.api", "debug");

    // SLACK_BOT_TOKEN という環境変数が設定されている前提
    App app = new App();

    // イベント API
    app.event(MessageEvent.class, (req, ctx) -> {
      ctx.say(":wave: こんにちは <@" + req.getEvent().getUser() + ">！");
      return ctx.ack();
    });

    // ショートカットとモーダル
    app.globalShortcut("socket-mode-shortcut", (req, ctx) -> {
      View modalView = view(v -> v
        .type("modal")
        .callbackId("modal-id")
        .title(viewTitle(title -> title.type("plain_text").text("タスク登録").emoji(true)))
        .submit(viewSubmit(submit -> submit.type("plain_text").text("送信").emoji(true)))
        .close(viewClose(close -> close.type("plain_text").text("キャンセル").emoji(true)))
        .blocks(asBlocks(input(i -> i
          .blockId("input-task")
          .element(plainTextInput(pti -> pti.actionId("input").multiline(true)))
          .label(plainText(pt -> pt.text("タスクの詳細・期限などを書いてください")))
        )))
      );
      ctx.asyncClient().viewsOpen(r -> r
        .triggerId(req.getPayload().getTriggerId())
        .view(modalView)
      );
      return ctx.ack();
    });
    app.viewSubmission("modal-id", (req, ctx) -> {
      ctx.logger.info("Submitted data: {}", req.getPayload().getView().getState().getValues());
      return ctx.ack();
    });

    // SLACK_APP_TOKEN という環境変数が設定されている前提
    new SocketModeApp(app).start();
  }
}
