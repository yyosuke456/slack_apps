/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package slack.socket.app;

import com.slack.api.bolt.App;
import com.slack.api.bolt.socket_mode.SocketModeApp;
import com.slack.api.model.event.MessageEvent;
import com.slack.api.model.view.View;

import static com.slack.api.model.block.Blocks.asBlocks;
import static com.slack.api.model.block.Blocks.input;
import static com.slack.api.model.block.composition.BlockCompositions.plainText;
import static com.slack.api.model.block.element.BlockElements.plainTextInput;
import static com.slack.api.model.view.Views.*;

import com.slack.api.methods.MethodsClient;
import com.slack.api.methods.response.chat.ChatGetPermalinkResponse;
import com.slack.api.methods.response.chat.ChatPostMessageResponse;
import com.slack.api.methods.response.reactions.ReactionsAddResponse;
import com.slack.api.model.event.MessageEvent;
import com.slack.api.model.event.ReactionAddedEvent;

import java.util.Arrays;
import java.util.regex.Pattern;


public class MyApp {
  public static void main(String[] args) throws Exception {
    System.setProperty("org.slf4j.simpleLogger.log.com.slack.api", "debug");

    // SLACK_BOT_TOKEN という環境変数が設定されている前提
    App app = new App();

    app.event(ReactionAddedEvent.class, (payload, ctx) -> {
      ReactionAddedEvent event = payload.getEvent();
      if (event.getReaction().equals("white_check_mark")) {
        ChatPostMessageResponse message = ctx.client().chatPostMessage(r -> r
          .channel(event.getItem().getChannel())
          .threadTs(event.getItem().getTs())
          .text("<@" + event.getUser() + "> ご対応いただき、本当にありがとうございました :two_hearts:"));
        if (!message.isOk()) {
          ctx.logger.error("chat.postMessage failed: {}", message.getError());
        }
      }
      return ctx.ack();
    });

    String notificationChannelId ="CDWP2MA9Z";
    // メッセージがモニタリング対象のキーワードを含むか確認
    Pattern sdk = Pattern.compile(".*[(Java SDK)|(Bolt)|(slack\\-java\\-sdk)].*", Pattern.CASE_INSENSITIVE);
    app.message(sdk, (payload, ctx) -> {
      MessageEvent event = payload.getEvent();
      String text = event.getText();
      MethodsClient client = ctx.client();
    
      // 👀 のリアクション絵文字をメッセージにつける
      String channelId = event.getChannel();
      String ts = event.getTs();
      ReactionsAddResponse reaction = client.reactionsAdd(r -> r.channel(channelId).timestamp(ts).name("eyes"));
      if (!reaction.isOk()) {
        ctx.logger.error("reactions.add failed: {}", reaction.getError());
      }
    
      // SDK の作者に通知メッセージを送る
      ChatGetPermalinkResponse permalink = client.chatGetPermalink(r -> r.channel(channelId).messageTs(ts));
      if (permalink.isOk()) {
        ChatPostMessageResponse message = client.chatPostMessage(r -> r
          .channel(notificationChannelId)
          .text("An issue with the Java SDK might be reported:\n" + permalink.getPermalink())
          .unfurlLinks(true));
        if (!message.isOk()) {
          ctx.logger.error("chat.postMessage failed: {}", message.getError());
        }
      } else {
        ctx.logger.error("chat.getPermalink failed: {}", permalink.getError());
      }
      return ctx.ack();
    });

    // ショートカットとモーダル
    app.globalShortcut("socket-mode-shortcut", (req, ctx) -> {
      View modalView = view(v -> v
        .type("modal")
        .callbackId("modal-id")
        .title(viewTitle(title -> title.type("plain_text").text("タスク登録").emoji(true)))
        .submit(viewSubmit(submit -> submit.type("plain_text").text("送信").emoji(true)))
        .close(viewClose(close -> close.type("plain_text").text("キャンセル").emoji(true)))
        .blocks(asBlocks(input(i -> i
          .blockId("input-task")
          .element(plainTextInput(pti -> pti.actionId("input").multiline(true)))
          .label(plainText(pt -> pt.text("タスクの詳細・期限などを書いてください")))
        )))
      );
      ctx.asyncClient().viewsOpen(r -> r
        .triggerId(req.getPayload().getTriggerId())
        .view(modalView)
      );
      return ctx.ack();
    });
    app.viewSubmission("modal-id", (req, ctx) -> {
      ctx.logger.info("Submitted data: {}", req.getPayload().getView().getState().getValues());
      return ctx.ack();
    });

    // SLACK_APP_TOKEN という環境変数が設定されている前提
    new SocketModeApp(app).start();
  }
}
